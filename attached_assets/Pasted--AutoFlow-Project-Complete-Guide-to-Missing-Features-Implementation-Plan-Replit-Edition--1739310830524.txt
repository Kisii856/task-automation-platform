# **🚀 AutoFlow Project - Complete Guide to Missing Features & Implementation Plan (Replit Edition)**  

This document outlines everything that **still needs to be done** in the AutoFlow project. It provides **clear explanations** and **step-by-step guidance** so you can complete the implementation using **Replit**.  

---

## **📌 What’s Missing & How to Implement It**
Here’s a list of features that are **not yet implemented**, along with a detailed **action plan** for each.

---

# **1️⃣ API Endpoints for Workflows (CRUD Operations)**  
### **🔴 Problem:**  
There are no API routes for **creating, updating, retrieving, or deleting workflows**. The backend currently lacks CRUD operations.  

### **🛠️ Solution:**  
- Implement REST API endpoints in `server/api/routes.ts`.  
- Use **Drizzle ORM** to interact with PostgreSQL.  
- Secure API with authentication middleware.  

### **✅ Steps to Implement:**  
**1. Modify the Workflow Schema (`shared/schema.ts`)**  
```ts
import { pgTable, serial, text, timestamp } from 'drizzle-orm/pg-core';

export const workflows = pgTable('workflows', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  steps: text('steps').notNull(),  // JSON string containing workflow steps
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
});
```

**2. Create API Routes (`server/api/routes.ts`)**  
```ts
import { Router } from 'express';
import { db } from '../db';
import { workflows } from '../../shared/schema';

const router = Router();

// Create Workflow
router.post('/workflows', async (req, res) => {
  try {
    const { name, steps } = req.body;
    const newWorkflow = await db.insert(workflows).values({ name, steps: JSON.stringify(steps) });
    res.status(201).json({ message: 'Workflow created successfully', newWorkflow });
  } catch (error) {
    res.status(500).json({ error: 'Error creating workflow' });
  }
});

// Get Workflows
router.get('/workflows', async (req, res) => {
  try {
    const allWorkflows = await db.select().from(workflows);
    res.json(allWorkflows);
  } catch (error) {
    res.status(500).json({ error: 'Error retrieving workflows' });
  }
});

// Update Workflow
router.put('/workflows/:id', async (req, res) => {
  try {
    const { name, steps } = req.body;
    await db.update(workflows).set({ name, steps: JSON.stringify(steps) }).where({ id: req.params.id });
    res.json({ message: 'Workflow updated successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Error updating workflow' });
  }
});

// Delete Workflow
router.delete('/workflows/:id', async (req, res) => {
  try {
    await db.delete(workflows).where({ id: req.params.id });
    res.json({ message: 'Workflow deleted successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Error deleting workflow' });
  }
});

export default router;
```

---

# **2️⃣ Integration with OpenAI (Task Decomposition AI)**  
### **🔴 Problem:**  
Right now, **task decomposition (AI-based workflow generation) is missing**. The AI should take a **user’s task description** and break it into **automation steps**.  

### **🛠️ Solution:**  
- Use **OpenAI API (GPT-4)** to convert a **task description** into structured **workflow steps**.  
- Validate **AI output** using **Pydantic** to prevent errors.  

### **✅ Steps to Implement:**  
**1. Update `backend/ai/decomposer.py` to Use OpenAI**  
```python
import os
import json
import openai
from pydantic import BaseModel
from typing import List, Optional

# Define Workflow Step Model
class WorkflowStep(BaseModel):
    action: str
    selector: Optional[str] = None
    url: Optional[str] = None
    value: Optional[str] = None

# Load API Key from Environment Variables
openai.api_key = os.getenv("OPENAI_API_KEY")

def decompose_task(task_description: str) -> List[WorkflowStep]:
    prompt = f"""
    You are an AI automation assistant. Convert this task into valid workflow steps:
    
    Task: "{task_description}"

    Respond ONLY in JSON format:
    {{
        "steps": [
            {{"action": "navigate", "url": "..."}},
            {{"action": "click", "selector": "..."}}
        ]
    }}
    """

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": prompt}]
    )

    steps = json.loads(response["choices"][0]["message"]["content"])["steps"]
    return [WorkflowStep(**step) for step in steps]
```

**2. Update API to Use AI (`server/api/routes.ts`)**  
```ts
router.post('/ai/process', async (req, res) => {
  try {
    const { task } = req.body;
    const response = await axios.post('http://backend/ai/decompose', { task });
    res.json(response.data);
  } catch (error) {
    res.status(500).json({ error: 'Failed to process task' });
  }
});
```

---

# **3️⃣ WebSocket for Real-Time Workflow Updates**  
### **🔴 Problem:**  
Currently, workflow execution **does not update in real-time**. Users must **refresh** to see updates.  

### **🛠️ Solution:**  
- Use **WebSockets (`socket.io`)** to send live updates.  
- Notify users when their workflow **starts, progresses, or completes**.  

### **✅ Steps to Implement:**  
**1. Install Dependencies**  
```bash
npm install socket.io socket.io-client
```

**2. Set Up WebSocket Server (`server/socket.ts`)**  
```ts
import { Server } from 'socket.io';
import http from 'http';

const server = http.createServer();
const io = new Server(server, { cors: { origin: "*" } });

io.on("connection", (socket) => {
  console.log("User connected:", socket.id);

  socket.on("runWorkflow", (workflowId) => {
    io.emit("workflowUpdate", { workflowId, status: "running" });

    setTimeout(() => {
      io.emit("workflowUpdate", { workflowId, status: "completed" });
    }, 5000);
  });

  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});

server.listen(3001, () => {
  console.log("WebSocket server running on port 3001");
});
```

**3. Connect WebSocket in Frontend (`frontend/src/App.jsx`)**  
```jsx
import { useEffect } from "react";
import io from "socket.io-client";

const socket = io("http://localhost:3001");

function App() {
  useEffect(() => {
    socket.on("workflowUpdate", (data) => {
      console.log("Workflow Update:", data);
    });
  }, []);

  return <h1>Real-Time Workflow Updates</h1>;
}

export default App;
```

---

# **📌 Summary: Features to Implement**
| Feature | Status | Steps to Complete |
|---------|--------|------------------|
| **CRUD API for Workflows** | ❌ Not Done | Implement in `routes.ts` |
| **AI-Based Task Decomposition** | ❌ Not Done | Connect OpenAI API in `decomposer.py` |
| **WebSocket for Live Updates** | ❌ Not Done | Set up `socket.io` in backend & frontend |
| **Database Migrations** | ❌ Not Done | Run `npm run db:push` |
| **Testing (Jest & Pytest)** | ❌ Not Done | Add unit tests |
| **Authentication (JWT Sessions)** | ❌ Not Done | Implement session handling |

---

### **📌 Final Steps**
1. **Copy & paste the code above into your Replit project.**  
2. **Run the backend (`npm run dev`) & frontend (`npm start`).**  
3. **Test API calls using Postman or `curl` commands.**  
4. **Deploy WebSockets & OpenAI integration.**  

Let me know if you need any modifications! 🚀