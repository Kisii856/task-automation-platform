Got it! I'll provide a **full project structure** along with all necessary files and configurations so you can copy-paste everything into **Replit** and start coding immediately.  

---

## **üìÅ Project Structure**
```
autoflow-replit/
‚îú‚îÄ‚îÄ backend/                   # FastAPI Backend
‚îÇ   ‚îú‚îÄ‚îÄ api/                   # API Endpoints
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes.py
‚îÇ   ‚îú‚îÄ‚îÄ models/                # Database Models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ workflow.py
‚îÇ   ‚îú‚îÄ‚îÄ ai/                    # AI Processing
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ decomposer.py
‚îÇ   ‚îú‚îÄ‚îÄ workers/               # Celery Workers
‚îÇ   ‚îú‚îÄ‚îÄ utils/                 # Utility Functions
‚îÇ   ‚îú‚îÄ‚îÄ main.py                 # FastAPI Entry Point
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt        # Python Dependencies
‚îÇ
‚îú‚îÄ‚îÄ frontend/                  # React Frontend
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/        # UI Components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/             # Application Pages
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/          # API Clients
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.jsx            # React Entry Point
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js           # React Root File
‚îÇ   ‚îú‚îÄ‚îÄ package.json           # Frontend Dependencies
‚îÇ
‚îú‚îÄ‚îÄ cloud/                     # Cloud Infrastructure
‚îÇ   ‚îú‚îÄ‚îÄ lambda/                # AWS Lambda Scripts
‚îÇ   ‚îú‚îÄ‚îÄ terraform/             # Infrastructure as Code
‚îÇ
‚îú‚îÄ‚îÄ .replit                    # Replit Configuration
‚îú‚îÄ‚îÄ replit.nix                  # Replit Dependencies
‚îú‚îÄ‚îÄ .gitignore                  # Git Ignore
‚îú‚îÄ‚îÄ README.md                   # Project Documentation
```

---

## **üåç Backend: FastAPI**
Create a **`backend/`** directory and inside it, create the following files.

### 1Ô∏è‚É£ **`backend/main.py`** (FastAPI Entry Point)
```python
from fastapi import FastAPI
from backend.api.routes import router

app = FastAPI()

app.include_router(router)

@app.get("/")
async def root():
    return {"message": "Welcome to AutoFlow!"}
```

### 2Ô∏è‚É£ **`backend/api/routes.py`** (API Routes)
```python
from fastapi import APIRouter
from backend.ai.decomposer import decompose_task

router = APIRouter()

@router.post("/ai/process")
async def process_task(request: dict):
    task_description = request.get("task")
    steps = decompose_task(task_description)
    return {"steps": steps}
```

### 3Ô∏è‚É£ **`backend/ai/decomposer.py`** (AI Task Processing)
```python
import json
from pydantic import BaseModel
from typing import List, Optional

class WorkflowStep(BaseModel):
    action: str
    selector: Optional[str] = None
    url: Optional[str] = None
    value: Optional[str] = None

def decompose_task(task_description: str) -> List[WorkflowStep]:
    raw_output = '''
    {
        "steps": [
            {"action": "navigate", "url": "https://example.com"},
            {"action": "click", "selector": "#submit"}
        ]
    }
    '''
    steps = json.loads(raw_output)["steps"]
    return [WorkflowStep(**step) for step in steps]
```

### 4Ô∏è‚É£ **`backend/requirements.txt`** (Python Dependencies)
```
fastapi
uvicorn
pydantic
```

---

## **üñ•Ô∏è Frontend: React**
Create a **`frontend/`** directory and inside it, create the following files.

### 1Ô∏è‚É£ **`frontend/src/index.js`** (React Root)
```jsx
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";

ReactDOM.render(<App />, document.getElementById("root"));
```

### 2Ô∏è‚É£ **`frontend/src/App.jsx`** (Main App Component)
```jsx
import React, { useState } from "react";
import TaskInput from "./components/TaskInput";

export default function App() {
  const [workflow, setWorkflow] = useState([]);

  return (
    <div>
      <h1>AutoFlow</h1>
      <TaskInput onTaskSubmit={setWorkflow} />
      <pre>{JSON.stringify(workflow, null, 2)}</pre>
    </div>
  );
}
```

### 3Ô∏è‚É£ **`frontend/src/components/TaskInput.jsx`** (User Input Component)
```jsx
import React, { useState } from "react";
import axios from "axios";

export default function TaskInput({ onTaskSubmit }) {
  const [input, setInput] = useState("");

  const handleSubmit = async () => {
    const response = await axios.post("http://localhost:8000/ai/process", { task: input });
    onTaskSubmit(response.data.steps);
  };

  return (
    <div>
      <textarea value={input} onChange={(e) => setInput(e.target.value)} placeholder="Describe your automation task..." />
      <button onClick={handleSubmit}>Generate Workflow</button>
    </div>
  );
}
```

### 4Ô∏è‚É£ **`frontend/package.json`** (React Dependencies)
```json
{
  "name": "autoflow-frontend",
  "version": "1.0.0",
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "axios": "^0.27.2"
  },
  "scripts": {
    "start": "react-scripts start"
  }
}
```

---

## **‚òÅÔ∏è Cloud Execution: AWS Lambda**
Create a **`cloud/lambda/handler.py`** file.

```python
import json
from playwright.sync_api import sync_playwright

def lambda_handler(event, context):
    with sync_playwright() as p:
        browser = p.chromium.launch()
        page = browser.new_page()
        page.goto(event["url"])
        page.screenshot(path="screenshot.png")
        browser.close()
    
    return {
        "statusCode": 200,
        "body": json.dumps("Screenshot taken successfully")
    }
}
```

---

## **üõ†Ô∏è Replit Configuration**
Create a `.replit` file in the root directory.

```ini
run = "uvicorn backend.main:app --host=0.0.0.0 --port=8000"
```

Create a `replit.nix` file for dependencies.

```nix
{ pkgs }: {
  deps = [
    pkgs.python310
    pkgs.nodejs
  ];
}
```

---

## **üöÄ How to Run**
1. **Start Backend**
   ```bash
   cd backend
   pip install -r requirements.txt
   uvicorn main:app --host=0.0.0.0 --port=8000
   ```
2. **Start Frontend**
   ```bash
   cd frontend
   npm install
   npm start
   ```
3. **Test API**
   ```bash
   curl -X POST "http://localhost:8000/ai/process" -H "Content-Type: application/json" -d '{"task": "Scrape Amazon prices"}'
   ```

---

This is your **complete AutoFlow setup** ready for **Replit**! üéâ Just **copy & paste** the files, run the commands, and start building! üöÄ